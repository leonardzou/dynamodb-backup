AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  dynamodb-backup
  Sample SAM Template for dynamodb-backup


Globals:
  Function:
    Timeout: 900
    MemorySize: 256


Parameters:
  BackupBucketSuffix:
    Description: BackupBucketSuffix
    Type: String

Resources:
  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${BackupBucketSuffix}'
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: FunctionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:PutObjectTagging'
                - 's3:GetObjectTagging'
              Resource: !Sub 'arn:aws:s3:::${BackupBucket}/*'
            - Effect: Allow
              Action:
                - 'cloudwatch:PutMetricData'
              Resource: '*'
            - Effect: Allow
              Action:
                - 'dynamodb:ListTables'
                - 'dynamodb:DescribeTable'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
              Resource: '*'
            - Effect: Allow
              Action:
                - 's3:ListBucket'
              Resource: !Sub 'arn:aws:s3:::${BackupBucket}'
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dynamodb-backup/
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          BucketName: !Ref BackupBucket
          Region: !Ref 'AWS::Region'
      Events:
        BackupSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(0/15 * * * ? *)


